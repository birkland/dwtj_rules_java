'''Defines the `checkstyle_aspect`.
'''

load("@dwtj_rules_java//java:providers/JavaCompilationInfo.bzl", "JavaCompilationInfo")
load(
    "@dwtj_rules_java//java:rules/common/extract/toolchain_info.bzl",
    "extract_java_executable",
    "extract_java_runtime_toolchain_class_path_separator",
    "extract_checkstyle_toolchain_info",
)

CheckstyleAspectInfo = provider(
    fields = {
        'output_file': "The output file generated by `checkstyle_aspect`. This will be `None` if the target doesn't include any Java sources to be checked.",
    }
)

def _file_name(target, suffix):
    return "{}.checkstyle.{}".format(target.label.name, suffix)

def _checkstyle_aspect_impl(target, aspect_ctx):
    # Skip a target if it doesn't provide a `JavaCompilationInfo`.
    if JavaCompilationInfo not in target:
        return [CheckstyleAspectInfo()]
    
    # Extract some information from the environment for brevity.
    actions = aspect_ctx.actions
    srcs = target[JavaCompilationInfo].srcs
    srcs_args_file = target[JavaCompilationInfo].srcs_args_file
    java_executable = extract_java_executable(aspect_ctx)
    checkstyle_toolchain_info = extract_checkstyle_toolchain_info(aspect_ctx)
    checkstyle_java_info = checkstyle_toolchain_info.checkstyle_java_info

    # Declare an output log file for Checkstyle to write to.
    log_file = actions.declare_file(_file_name(target, "log"))

    # Create an args file containing Checkstyle's run-time class path.
    # TODO(dwtj): Move this into the toolchain so that it isn't re-created in
    #  every instantiation/application of the `checkstyle_aspect`.
    class_path_args = actions.args()
    class_path_args.add_joined(
        checkstyle_java_info.transitive_runtime_jars,
        join_with = extract_java_runtime_toolchain_class_path_separator(aspect_ctx),
        omit_if_empty = False,
    )
    class_path_args_file = actions.declare_file(_file_name(target, "class_path.args"))
    actions.write(
        class_path_args_file,
        content = class_path_args,
        is_executable = False,
    )

    # Instantiate a script which will run Checkstyle from a template.
    run_checkstyle_script = actions.declare_file(_file_name(target, "sh"))
    actions.expand_template(
        template = aspect_ctx.file._run_checkstyle_script_template,
        output = run_checkstyle_script,
        substitutions = {
            "{JAVA_EXECUTABLE}": java_executable.path,
            "{JAVA_SOURCES_ARGS_FILE}": srcs_args_file.path,
            "{CHECKSTYLE_CLASS_PATH_ARGS_FILE}": class_path_args_file.path,
            "{CHECKSTYLE_LOG_FILE}": log_file.path,
        },
        is_executable = True,
    )

    # Lastly, run our Checkstyle script on the target's srcs:
    actions.run(
        executable = run_checkstyle_script,
        inputs = depset(
            direct = [
                java_executable,
                srcs_args_file,
                class_path_args_file,
            ],
            transitive = [
                srcs,
                checkstyle_java_info.transitive_runtime_jars,
            ]
        ),
        outputs = [log_file],
        mnemonic = "Checkstyle",
        progress_message = "Using Checkstyle to check Java sources of Java target `{}`".format(target.label),
        use_default_shell_env = False,
    )

    return [
        OutputGroupInfo(default = [log_file]),
        CheckstyleAspectInfo(output_file = log_file)
    ]

checkstyle_aspect = aspect(
    implementation = _checkstyle_aspect_impl,
    provides = [CheckstyleAspectInfo],
    attrs = {
        "_run_checkstyle_script_template": attr.label(
            default = "@dwtj_rules_java//java:aspects/checkstyle_aspect/TEMPLATE.run_checkstyle.sh",
            allow_single_file = True,
        ),
    },
    toolchains = [
        '@dwtj_rules_java//java/toolchains/checkstyle_toolchain:toolchain_type',
        '@dwtj_rules_java//java/toolchains/java_runtime_toolchain:toolchain_type',
    ],
)
