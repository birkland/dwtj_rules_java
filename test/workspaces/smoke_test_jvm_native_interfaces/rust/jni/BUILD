load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library")
load("@dwtj_rules_java//java:defs.bzl", "dwtj_java_binary")

rust_library(
    name = "myjni",
    srcs = ["MyLib.rs"],
    crate_type = "cdylib",
    edition = "2018",
    deps = ["@openjdk_linux_x64//rust/jni"],
)

dwtj_java_binary(
    name = "MyLib_java",
    srcs = ["MyLib.java"],
    main_class = "rust.jni.MyLib",
    output_jar = "MyLib.jar",
)

# TODO(dwtj): This test target does not currently work because of an issue with
# `sh_test` described by [bazelbuild/bazel#4519][1]. The rust library output by
# the above rule `:myjni` is not added to the runfiles of this `sh_test` target
# even though it appears in the `data` attribute. So, I ought to think of
# another way to automatically test the output library generated by Rust.
#
# [1]: https://github.com/bazelbuild/bazel/issues/4519
#
#sh_test(
#    name = "test",
#    srcs = ["test.sh"],
#    data = [
#        ":myjni",
#        ":MyLib.jar",
#    ],
#    args = [
#        "rust/jni",
#        "$(location :MyLib.jar)",
#    ],
#)
